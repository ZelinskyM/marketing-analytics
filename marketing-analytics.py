import streamlit as st
import pandas as pd
from datetime import datetime
import hashlib

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
st.set_page_config(
    page_title="Marketing Analytics",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# --- –°–û–í–†–ï–ú–ï–ù–ù–´–ô CSS ---
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .main {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background-color: #0F1117;
        color: #FAFAFA;
    }
    
    .main .block-container {
        background: #1E1E1E;
        border-radius: 16px;
        padding: 2rem;
        margin-top: 1rem;
        border: 1px solid #2D2D2D;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
    }
    
    /* –°–∞–π–¥–±–∞—Ä */
    .css-1d391kg {
        background: linear-gradient(135deg, #1E1E1E 0%, #2D2D2D 100%);
        border-right: 1px solid #2D2D2D;
    }
    
    .css-1d391kg .css-1lcbmhc {
        background: transparent;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3 {
        color: #FFFFFF;
        font-weight: 600;
    }
    
    h1 {
        font-size: 2.2rem;
        background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1.5rem;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton>button {
        background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 12px 24px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    }
    
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
    }
    
    /* –§–æ—Ä–º—ã */
    .stForm {
        background: #2D2D2D;
        padding: 2rem;
        border-radius: 16px;
        border: 1px solid #3D3D3D;
    }
    
    .stTextInput>div>div>input, .stSelectbox>div>div>select {
        background: #1E1E1E;
        border: 1px solid #3D3D3D;
        border-radius: 10px;
        color: #FFFFFF;
        padding: 12px;
    }
    
    .stRadio>div {
        background: #2D2D2D;
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #3D3D3D;
    }
    
    /* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ */
    .stInfo {
        background: linear-gradient(135deg, #2D2D2D, #3D3D3D);
        border: 1px solid #4ECDC4;
        border-radius: 12px;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .stMetric {
        background: linear-gradient(135deg, #2D2D2D, #3D3D3D);
        border: 1px solid #3D3D3D;
        border-radius: 12px;
        padding: 1rem;
    }
    
    /* –¢–∞–±–ª–∏—Ü—ã */
    .stDataFrame {
        border-radius: 12px;
        overflow: hidden;
        border: 1px solid #3D3D3D;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */
    @media (max-width: 768px) {
        .main .block-container {
            padding: 1rem;
            border-radius: 12px;
            margin-top: 0.5rem;
        }
        
        h1 {
            font-size: 1.8rem;
        }
        
        .stForm {
            padding: 1.5rem;
        }
        
        /* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ */
        .css-1d391kg {
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }
        
        .css-1d391kg:focus-within {
            transform: translateX(0);
        }
    }
    
    /* –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö */
    @media (max-width: 480px) {
        .main .block-container {
            padding: 0.8rem;
        }
        
        h1 {
            font-size: 1.5rem;
        }
        
        h2 {
            font-size: 1.2rem;
        }
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */
    .stSuccess {
        background: linear-gradient(135deg, #2D2D2D, #1E3A28);
        border: 1px solid #10B981;
        border-radius: 12px;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π */
    .stWarning {
        background: linear-gradient(135deg, #2D2D2D, #3A2A1E);
        border: 1px solid #F59E0B;
        border-radius: 12px;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –æ—à–∏–±–æ–∫ */
    .stError {
        background: linear-gradient(135deg, #2D2D2D, #3A1E1E);
        border: 1px solid #EF4444;
        border-radius: 12px;
    }
</style>
""", unsafe_allow_html=True)

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
def create_client_id(name, phone):
    unique_string = f"{name}_{phone}"
    return hashlib.md5(unique_string.encode()).hexdigest()

def load_data():
    try:
        df = pd.read_csv("marketing_database.csv", encoding='utf-8')
        # –°–æ–∑–¥–∞–µ–º visit_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'visit_id' not in df.columns:
            df['visit_id'] = df.apply(lambda row: hashlib.md5(f"{row['–î–∞—Ç–∞']}_{row['–ò–º—è']}_{row['–¢–µ–ª–µ—Ñ–æ–Ω']}".encode()).hexdigest(), axis=1)
            df.to_csv("marketing_database.csv", index=False, encoding='utf-8')
        return df
    except FileNotFoundError:
        return pd.DataFrame(columns=[
            "visit_id", "client_id", "–î–∞—Ç–∞", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∞", 
            "–¶–µ–Ω–∞", "–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª", "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã", "–°—Å—ã–ª–∫–∞_VK", "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞"
        ])

def save_data(df):
    df.to_csv("marketing_database.csv", index=False, encoding='utf-8')

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –¶–ï–ù–´ –£–°–õ–£–ì ---
SERVICE_PRICES = {
    "–°—Ç—Ä–∏–∂–∫–∞": 900,
    "–ë–æ—Ä–æ–¥–∞": 500,
    "VIP": 500,
    "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Å–∫–æ–º 1": 200,
    "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Å–∫–æ–º 2": 300,
    "–£—Ö–æ–¥–æ–≤–∞—è –º–∞—Å–∫–∞ Nishman": 1000,
    "–°—Ç—Ä–∏–∂–∫–∞+–±–æ—Ä–æ–¥–∞": 1400,
    "–î–µ—Ç—Å–∫–∞—è": 800,
    "–ü–æ–¥ –º–∞—à–∏–Ω–∫—É": 900
}

# --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
df = load_data()

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
def get_today_stats(df):
    today = datetime.now().strftime("%Y-%m-%d")
    today_df = df[(df['–î–∞—Ç–∞'].str.startswith(today)) & (df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞')]
    
    clients_today = today_df['–ò–º—è'].nunique()
    records_today = len(today_df)
    income_today = today_df['–¶–µ–Ω–∞'].sum()
    salary_today = income_today * 0.4
    
    return clients_today, records_today, income_today, salary_today

def get_month_stats(df, year_month=None):
    if year_month is None:
        year_month = datetime.now().strftime("%Y-%m")
    
    month_df = df[(df['–î–∞—Ç–∞'].str.startswith(year_month)) & (df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞')]
    
    stats = {
        'all_clients': month_df['–ò–º—è'].nunique(),
        'all_income': month_df['–¶–µ–Ω–∞'].sum(),
        'products_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–ü—Ä–æ–¥—É–∫—Ç—ã']['–ò–º—è'].nunique(),
        'products_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–ü—Ä–æ–¥—É–∫—Ç—ã']['–¶–µ–Ω–∞'].sum(),
        'study_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–£—á–µ–±–∞']['–ò–º—è'].nunique(),
        'study_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–£—á–µ–±–∞']['–¶–µ–Ω–∞'].sum(),
        'flowers_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–¶–≤–µ—Ç–æ—á–Ω—ã–π']['–ò–º—è'].nunique(),
        'flowers_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–¶–≤–µ—Ç–æ—á–Ω—ã–π']['–¶–µ–Ω–∞'].sum(),
        'post_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–ü–æ—á—Ç–∞']['–ò–º—è'].nunique(),
        'post_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–ü–æ—á—Ç–∞']['–¶–µ–Ω–∞'].sum(),
        'chop_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == 'Chop']['–ò–º—è'].nunique(),
        'chop_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == 'Chop']['–¶–µ–Ω–∞'].sum(),
        'random_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–°–ª—É—á–∞–π–Ω—ã–π']['–ò–º—è'].nunique(),
        'random_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–°–ª—É—á–∞–π–Ω—ã–π']['–¶–µ–Ω–∞'].sum()
    }
    
    return stats

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò –ö–õ–ò–ï–ù–¢–ê ---
def get_client_history(df, client_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞"""
    client_history = df[df['client_id'] == client_id].sort_values('–î–∞—Ç–∞', ascending=False)
    return client_history

# --- –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ---
st.sidebar.title("üöÄ –ù–∞–≤–∏–≥–∞—Ü–∏—è")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
try:
    from streamlit import runtime
    if runtime.exists():
        context = runtime.get_instance().script_run_ctx
        if hasattr(context, 'request'):
            user_agent = context.request.headers.get('user-agent', '')
            is_mobile = any(device in user_agent.lower() for device in ['mobile', 'android', 'iphone'])
        else:
            is_mobile = False
    else:
        is_mobile = False
except:
    is_mobile = False

if is_mobile:
    page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", 
        ["–ì–ª–∞–≤–Ω–∞—è", "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "–†–∞—Å—Å—ã–ª–∫–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"])
else:
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", 
        ["–ì–ª–∞–≤–Ω–∞—è", "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "–†–∞—Å—Å—ã–ª–∫–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"])

# --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –î–ï–ù–¨ –í –°–ê–ô–î–ë–ê–†–ï ---
st.sidebar.markdown("---")
st.sidebar.markdown("### üìä –°–µ–≥–æ–¥–Ω—è")

clients_today, records_today, income_today, salary_today = get_today_stats(df)

st.sidebar.markdown(f"""
<div style='background: linear-gradient(135deg, #2D2D2D, #3D3D3D); padding: 1rem; border-radius: 12px; border: 1px solid #3D3D3D;'>
    <div style='color: #4ECDC4; font-size: 0.9rem;'>üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: <b>{clients_today}</b></div>
    <div style='color: #FF6B6B; font-size: 0.9rem;'>üìù –ó–∞–ø–∏—Å–µ–π: <b>{records_today}</b></div>
    <div style='color: #FFD93D; font-size: 0.9rem;'>üí∞ –í—ã—Ä—É—á–∫–∞: <b>{income_today:,} ‚ÇΩ</b></div>
    <div style='color: #6BCF7F; font-size: 0.9rem;'>üíµ –ó–∞—Ä–ø–ª–∞—Ç–∞: <b>{salary_today:,.0f} ‚ÇΩ</b></div>
</div>
""", unsafe_allow_html=True)

# --- –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ---
if page == "–ì–ª–∞–≤–Ω–∞—è":
    st.title("üìà Marketing Analytics")
    st.markdown("---")
    
    # –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if not df.empty:
        df['–ú–µ—Å—è—Ü'] = df['–î–∞—Ç–∞'].str[:7]
        available_months = sorted(df['–ú–µ—Å—è—Ü'].unique(), reverse=True)
        selected_month = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", 
                                    available_months, index=0)
    else:
        selected_month = datetime.now().strftime("%Y-%m")
        st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", [selected_month])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    month_stats = get_month_stats(df, selected_month)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {selected_month}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –ª–µ–≤–∞—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫, –ø—Ä–∞–≤–∞—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥—Ä—É–≥ –ø–æ–¥ –¥—Ä—É–≥–æ–º
        st.metric("üë• –ö–ª–∏–µ–Ω—Ç–æ–≤", month_stats['all_clients'])
        st.metric("üí∞ –í—ã—Ä—É—á–∫–∞", f"{month_stats['all_income']:,} ‚ÇΩ")
    
    with col2:
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
        st.markdown("**üìà –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:**")
        st.markdown(f"üìö –£—á–µ–±–∞ {month_stats['study_income']:,} ‚ÇΩ")
        st.markdown(f"üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã {month_stats['products_income']:,} ‚ÇΩ")
        st.markdown(f"üíê –¶–≤–µ—Ç–æ—á–Ω—ã–π{month_stats['flowers_income']:,} ‚ÇΩ")
        st.markdown(f"üìÆ –ü–æ—á—Ç–∞ {month_stats['post_income']:,} ‚ÇΩ")
        st.markdown(f"‚úÇÔ∏è Chop {month_stats['chop_income']:,} ‚ÇΩ")
        st.markdown(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π {month_stats['random_income']:,} ‚ÇΩ")

# --- –î–û–ë–ê–í–ò–¢–¨ –ö–õ–ò–ï–ù–¢–ê ---
elif page == "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞":
    st.title("üë• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    st.markdown("---")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
    with st.form("client_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        
        with col1:
            direction = st.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*", ["–£—á–µ–±–∞", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–¶–≤–µ—Ç–æ—á–Ω—ã–π", "–ü–æ—á—Ç–∞", "Chop", "–°–ª—É—á–∞–π–Ω—ã–π"])
            name = st.text_input("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞*")
            phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*")
            
        with col2:
            service = st.selectbox("–£—Å–ª—É–≥–∞*", list(SERVICE_PRICES.keys()))
            price = SERVICE_PRICES[service]
            st.info(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: **{price} —Ä—É–±.**")
            
            # –ü–æ–ª–µ "–ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª" —Ç–æ–ª—å–∫–æ –¥–ª—è –£—á–µ–±—ã
            if direction == "–£—á–µ–±–∞":
                all_people = list(df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞']["–ò–º—è"].unique())
                mailing_contacts = list(df[df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == "–†–∞—Å—Å—ã–ª–∫–∞"]["–ò–º—è"].unique())
                all_available_people = list(set(all_people + mailing_contacts))
                
                invited_by = st.selectbox("–ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª", [""] + sorted(all_available_people))
            else:
                invited_by = ""
        
        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", use_container_width=True)
        
        if submitted:
            if name and phone and service:
                client_id = create_client_id(name, phone)
                visit_id = hashlib.md5(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}_{name}_{phone}".encode()).hexdigest()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                existing_client = df[df['client_id'] == client_id]
                
                if len(existing_client) > 0:
                    st.warning(f"üë§ –ö–ª–∏–µ–Ω—Ç {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ...")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–∞
                    client_history = get_client_history(df, client_id)
                    st.info(f"üìã –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {name} ({len(client_history)} –ø–æ—Å–µ—â–µ–Ω–∏–π):")
                    
                    for _, visit in client_history.head(3).iterrows():
                        st.write(f"‚Ä¢ {visit['–î–∞—Ç–∞'][:16]} - {visit['–£—Å–ª—É–≥–∞']} ({visit['–¶–µ–Ω–∞']} —Ä—É–±.)")
                    
                    if len(client_history) > 3:
                        st.write(f"... –∏ –µ—â–µ {len(client_history) - 3} –ø–æ—Å–µ—â–µ–Ω–∏–π")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–ø–æ—Å–µ—â–µ–Ω–∏–µ)
                new_visit = {
                    "visit_id": visit_id,
                    "client_id": client_id,
                    "–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": direction,
                    "–ò–º—è": name,
                    "–¢–µ–ª–µ—Ñ–æ–Ω": phone,
                    "–£—Å–ª—É–≥–∞": service,
                    "–¶–µ–Ω–∞": price,
                    "–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª": invited_by,
                    "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã": "",
                    "–°—Å—ã–ª–∫–∞_VK": "",
                    "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞": ""
                }
                df = pd.concat([df, pd.DataFrame([new_visit])], ignore_index=True)
                
                save_data(df)
                st.success(f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                
            else:
                st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)")

# --- –†–ê–°–°–´–õ–ö–ê ---
elif page == "–†–∞—Å—Å—ã–ª–∫–∞":
    st.title("üìß –†–∞—Å—Å—ã–ª–∫–∞")
    st.markdown("---")
    
    # –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º selectbox –≤–º–µ—Å—Ç–æ tabs
    if is_mobile:
        tab_option = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", ["–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", "–ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"])
    else:
        tab_option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", ["–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", "–ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"], horizontal=True)
    
    if tab_option == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç":
        with st.form("mailing_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            
            with col1:
                mailing_name = st.text_input("–ò–º—è*")
                study_place = st.text_input("–ú–µ—Å—Ç–æ —É—á–µ–±—ã")
                
            with col2:
                vk_link = st.text_input("–°—Å—ã–ª–∫–∞ VK")
                mailing_consent = st.radio("–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É*", ["–î–∞", "–ù–µ—Ç"])
            
            submitted_mailing = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", use_container_width=True)
            
            if submitted_mailing:
                if mailing_name:
                    client_id = create_client_id(mailing_name, "")
                    visit_id = hashlib.md5(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}_{mailing_name}_".encode()).hexdigest()
                    
                    new_mailing = {
                        "visit_id": visit_id,
                        "client_id": client_id,
                        "–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "–†–∞—Å—Å—ã–ª–∫–∞",
                        "–ò–º—è": mailing_name,
                        "–¢–µ–ª–µ—Ñ–æ–Ω": "",
                        "–£—Å–ª—É–≥–∞": "",
                        "–¶–µ–Ω–∞": 0,
                        "–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª": "",
                        "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã": study_place,
                        "–°—Å—ã–ª–∫–∞_VK": vk_link,
                        "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞": mailing_consent
                    }
                    df = pd.concat([df, pd.DataFrame([new_mailing])], ignore_index=True)
                    save_data(df)
                    st.success(f"‚úÖ {mailing_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Ä–∞—Å—Å—ã–ª–∫–∏!")
                else:
                    st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è")
    
    else:  # –ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        mailing_df = df[df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == "–†–∞—Å—Å—ã–ª–∫–∞"]
        if not mailing_df.empty:
            st.dataframe(mailing_df[["–ò–º—è", "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã", "–°—Å—ã–ª–∫–∞_VK", "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞"]])
            
            contacts_to_delete = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                mailing_df["–ò–º—è"].unique()
            )
            
            if contacts_to_delete and st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã", use_container_width=True):
                df = df[~((df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == "–†–∞—Å—Å—ã–ª–∫–∞") & (df["–ò–º—è"].isin(contacts_to_delete)))]
                save_data(df)
                st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(contacts_to_delete)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤!")
                st.rerun()
        else:
            st.info("üì≠ –ë–∞–∑–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç–∞")

# --- –ê–ù–ê–õ–ò–¢–ò–ö–ê ---
elif page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
    st.title("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    st.markdown("---")
    
    if not df.empty:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_income = df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞']["–¶–µ–Ω–∞"].sum()
            st.metric("üí∞ –í—ã—Ä—É—á–∫–∞", f"{total_income:,} ‚ÇΩ")
            
        with col2:
            total_clients = df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞']["–ò–º—è"].nunique()
            st.metric("üë• –ö–ª–∏–µ–Ω—Ç–æ–≤", total_clients)
            
        with col3:
            total_services = len(df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞'])
            st.metric("üìù –£—Å–ª—É–≥", total_services)
            
        with col4:
            filtered_df = df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞']
            avg_price = filtered_df["–¶–µ–Ω–∞"].mean() if len(filtered_df) > 0 else 0
            st.metric("üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_price:.0f} ‚ÇΩ")
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
        
        col1, col2 = st.columns(2)
        
        with col1:
            filter_direction = st.multiselect("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"].unique())
            filter_service = st.multiselect("–£—Å–ª—É–≥–∞", df["–£—Å–ª—É–≥–∞"].unique())
            
        with col2:
            min_price = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", 0, value=0)
            max_price = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", 0, value=int(df["–¶–µ–Ω–∞"].max()))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = df.copy()
        
        if filter_direction:
            filtered_df = filtered_df[filtered_df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"].isin(filter_direction)]
        if filter_service:
            filtered_df = filtered_df[filtered_df["–£—Å–ª—É–≥–∞"].isin(filter_service)]
        
        filtered_df = filtered_df[(filtered_df["–¶–µ–Ω–∞"] >= min_price) & (filtered_df["–¶–µ–Ω–∞"] <= max_price)]
        
        # –î–∞–Ω–Ω—ã–µ
        st.subheader("üìã –î–∞–Ω–Ω—ã–µ")
        st.dataframe(filtered_df, use_container_width=True)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        st.subheader("üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        all_clients = filtered_df["–ò–º—è"].unique()
        
        if len(all_clients) > 0:
            clients_to_delete = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", all_clients)
            
            if clients_to_delete and st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", use_container_width=True):
                df = df[~df["–ò–º—è"].isin(clients_to_delete)]
                save_data(df)
                st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(clients_to_delete)} –∫–ª–∏–µ–Ω—Ç–æ–≤!")
                st.rerun()
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        csv = filtered_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"marketing_data_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv",
            use_container_width=True
        )
        
    else:
        st.info("üìä –î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")

# --- –ò–°–¢–û–†–ò–Ø –ö–õ–ò–ï–ù–¢–û–í ---
elif page == "–ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤":
    st.title("üìã –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
    st.markdown("---")
    
    if not df.empty:
        # –í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        all_clients = sorted(df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞']['–ò–º—è'].unique())
        
        if all_clients:
            selected_client = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", all_clients)
            
            if selected_client:
                # –ù–∞—Ö–æ–¥–∏–º client_id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                client_data = df[df['–ò–º—è'] == selected_client]
                if not client_data.empty:
                    client_id = client_data.iloc[0]['client_id']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–∞
                    client_history = get_client_history(df, client_id)
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        total_visits = len(client_history)
                        st.metric("üìä –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π", total_visits)
                    
                    with col2:
                        total_spent = client_history['–¶–µ–Ω–∞'].sum()
                        st.metric("üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ", f"{total_spent:,} ‚ÇΩ")
                    
                    with col3:
                        avg_spent = total_spent / total_visits if total_visits > 0 else 0
                        st.metric("üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_spent:.0f} ‚ÇΩ")
                    
                    st.markdown("---")
                    
                    # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π
                    st.subheader("üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π")
                    for _, visit in client_history.iterrows():
                        with st.container():
                            col1, col2, col3 = st.columns([2, 1, 1])
                            with col1:
                                st.write(f"**{visit['–î–∞—Ç–∞'][:16]}**")
                            with col2:
                                st.write(f"**{visit['–£—Å–ª—É–≥–∞']}**")
                            with col3:
                                st.write(f"**{visit['–¶–µ–Ω–∞']} ‚ÇΩ**")
                            
                            if visit['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–£—á–µ–±–∞' and visit['–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª']:
                                st.write(f"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {visit['–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª']}")
                            
                            st.markdown("---")
                else:
                    st.info("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            st.info("üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤")
    else:
        st.info("üìä –î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")

# --- JavaScript –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è —Å–∞–π–¥–±–∞—Ä–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ ---
if is_mobile:
    st.markdown("""
    <script>
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    setTimeout(function() {
        const sidebar = window.parent.document.querySelector('[data-testid="stSidebar"]');
        if (sidebar) {
            sidebar.style.transform = "translateX(-100%)";
        }
    }, 100);
    </script>
    """, unsafe_allow_html=True)
