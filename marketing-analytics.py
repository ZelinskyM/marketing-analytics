import streamlit as st
import pandas as pd
from datetime import datetime
import hashlib

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
st.set_page_config(
    page_title="Marketing Analytics",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# --- –ê–î–ê–ü–¢–ò–í–ù–´–ô CSS –î–õ–Ø –¢–ï–õ–ï–§–û–ù–ê ---
st.markdown("""
<style>
    @media (max-width: 768px) {
        .main .block-container {
            padding: 1rem;
        }
        .row-widget.stColumns {
            flex-direction: column;
        }
        h1 {
            font-size: 1.5rem !important;
        }
        h2 {
            font-size: 1.3rem !important;
        }
        h3 {
            font-size: 1.1rem !important;
        }
        .stButton button {
            width: 100%;
            margin: 5px 0;
        }
        .stForm {
            width: 100% !important;
        }
        .stDataFrame {
            overflow-x: auto;
        }
        .css-1d391kg {
            padding: 1rem;
        }
    }
    
    .main {
        font-family: Arial, sans-serif;
    }
</style>
""", unsafe_allow_html=True)

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
def create_client_id(name, phone):
    unique_string = f"{name}_{phone}"
    return hashlib.md5(unique_string.encode()).hexdigest()

def load_data():
    try:
        df = pd.read_csv("marketing_database.csv", encoding='utf-8')
        if 'client_id' not in df.columns:
            df['client_id'] = df.apply(lambda row: create_client_id(row['–ò–º—è'], row['–¢–µ–ª–µ—Ñ–æ–Ω']), axis=1)
            df.to_csv("marketing_database.csv", index=False, encoding='utf-8')
        return df
    except FileNotFoundError:
        return pd.DataFrame(columns=[
            "client_id", "–î–∞—Ç–∞", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∞", 
            "–¶–µ–Ω–∞", "–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª", "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã", "–°—Å—ã–ª–∫–∞_VK", "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞"
        ])

def save_data(df):
    df.to_csv("marketing_database.csv", index=False, encoding='utf-8')

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –¶–ï–ù–´ –£–°–õ–£–ì ---
SERVICE_PRICES = {
    "–°—Ç—Ä–∏–∂–∫–∞": 900,
    "–ë–æ—Ä–æ–¥–∞": 500,
    "VIP": 500,
    "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Å–∫–æ–º 1": 200,
    "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Å–∫–æ–º 2": 300,
    "–£—Ö–æ–¥–æ–≤–∞—è –º–∞—Å–∫–∞ Nishman": 1000,
    "–°—Ç—Ä–∏–∂–∫–∞+–±–æ—Ä–æ–¥–∞": 1400,
    "–î–µ—Ç—Å–∫–∞—è": 800,
    "–ü–æ–¥ –º–∞—à–∏–Ω–∫—É": 900
}

# --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
df = load_data()

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
def get_today_stats(df):
    today = datetime.now().strftime("%Y-%m-%d")
    # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º "–†–∞—Å—Å—ã–ª–∫–∞" –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    today_df = df[(df['–î–∞—Ç–∞'].str.startswith(today)) & (df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞')]
    
    clients_today = today_df['–ò–º—è'].nunique()
    records_today = len(today_df)
    income_today = today_df['–¶–µ–Ω–∞'].sum()
    salary_today = income_today * 0.4
    
    return clients_today, records_today, income_today, salary_today

def get_month_stats(df, year_month=None):
    if year_month is None:
        year_month = datetime.now().strftime("%Y-%m")
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º "–†–∞—Å—Å—ã–ª–∫–∞" –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    month_df = df[(df['–î–∞—Ç–∞'].str.startswith(year_month)) & (df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞')]
    
    stats = {
        'all_clients': month_df['–ò–º—è'].nunique(),
        'all_income': month_df['–¶–µ–Ω–∞'].sum(),
        'products_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–ü—Ä–æ–¥—É–∫—Ç—ã']['–ò–º—è'].nunique(),
        'products_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–ü—Ä–æ–¥—É–∫—Ç—ã']['–¶–µ–Ω–∞'].sum(),
        'study_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–£—á–µ–±–∞']['–ò–º—è'].nunique(),
        'study_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–£—á–µ–±–∞']['–¶–µ–Ω–∞'].sum(),
        'flowers_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–¶–≤–µ—Ç–æ—á–Ω—ã–π']['–ò–º—è'].nunique(),
        'flowers_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–¶–≤–µ—Ç–æ—á–Ω—ã–π']['–¶–µ–Ω–∞'].sum(),
        'post_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–ü–æ—á—Ç–∞']['–ò–º—è'].nunique(),
        'post_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–ü–æ—á—Ç–∞']['–¶–µ–Ω–∞'].sum(),
        'chop_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == 'Chop']['–ò–º—è'].nunique(),
        'chop_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == 'Chop']['–¶–µ–Ω–∞'].sum(),
        'random_clients': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–°–ª—É—á–∞–π–Ω—ã–π']['–ò–º—è'].nunique(),
        'random_income': month_df[month_df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == '–°–ª—É—á–∞–π–Ω—ã–π']['–¶–µ–Ω–∞'].sum()
    }
    
    return stats

# --- –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ---
st.sidebar.title("üì± –ù–∞–≤–∏–≥–∞—Ü–∏—è")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
try:
    from streamlit import runtime
    if runtime.exists():
        context = runtime.get_instance().script_run_ctx
        if hasattr(context, 'request'):
            user_agent = context.request.headers.get('user-agent', '')
            is_mobile = any(device in user_agent.lower() for device in ['mobile', 'android', 'iphone'])
        else:
            is_mobile = False
    else:
        is_mobile = False
except:
    is_mobile = False

if is_mobile:
    page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", 
        ["–ì–ª–∞–≤–Ω–∞—è", "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "–†–∞—Å—Å—ã–ª–∫–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
else:
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", 
        ["–ì–ª–∞–≤–Ω–∞—è", "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "–†–∞—Å—Å—ã–ª–∫–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])

# --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –î–ï–ù–¨ –í –°–ê–ô–î–ë–ê–†–ï ---
st.sidebar.markdown("---")

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–∏—Å–∫–ª—é—á–∞—è —Ä–∞—Å—Å—ã–ª–∫—É)
clients_today, records_today, income_today, salary_today = get_today_stats(df)

st.sidebar.info(f"""
**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:**
- –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients_today}
- –ó–∞–ø–∏—Å–µ–π: {records_today}
- –í—ã—Ä—É—á–∫–∞: {income_today:,} —Ä—É–±.
- –ó–∞—Ä–ø–ª–∞—Ç–∞ (40%): {salary_today:,.0f} —Ä—É–±.
""")

# --- –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ---
if page == "–ì–ª–∞–≤–Ω–∞—è":
    st.title("üè† Marketing Analytics")
    st.markdown("---")
    
    # –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if not df.empty:
        df['–ú–µ—Å—è—Ü'] = df['–î–∞—Ç–∞'].str[:7]
        available_months = sorted(df['–ú–µ—Å—è—Ü'].unique(), reverse=True)
        selected_month = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", 
                                    available_months, index=0)
    else:
        selected_month = datetime.now().strftime("%Y-%m")
        st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", [selected_month])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü (–∏—Å–∫–ª—é—á–∞—è —Ä–∞—Å—Å—ã–ª–∫—É)
    month_stats = get_month_stats(df, selected_month)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    st.subheader(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {selected_month}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü", month_stats['all_clients'])
        st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü", f"{month_stats['all_income']:,} —Ä—É–±.")
    
    with col2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        st.markdown("**–í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:**")
        st.markdown(f"üìö –£—á–µ–±–∞: {month_stats['study_income']:,} —Ä—É–±.")
        st.markdown(f"üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã: {month_stats['products_income']:,} —Ä—É–±.")
        st.markdown(f"üíê –¶–≤–µ—Ç–æ—á–Ω—ã–π: {month_stats['flowers_income']:,} —Ä—É–±.")
        st.markdown(f"üìÆ –ü–æ—á—Ç–∞: {month_stats['post_income']:,} —Ä—É–±.")
        st.markdown(f"‚úÇÔ∏è Chop: {month_stats['chop_income']:,} —Ä—É–±.")
        st.markdown(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π: {month_stats['random_income']:,} —Ä—É–±.")

# --- –î–û–ë–ê–í–ò–¢–¨ –ö–õ–ò–ï–ù–¢–ê ---
elif page == "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞":
    st.title("üë• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    st.markdown("---")
    
    with st.form("client_form"):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "Chop" –∏ "–°–ª—É—á–∞–π–Ω—ã–π"
        direction = st.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*", ["–£—á–µ–±–∞", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–¶–≤–µ—Ç–æ—á–Ω—ã–π", "–ü–æ—á—Ç–∞", "Chop", "–°–ª—É—á–∞–π–Ω—ã–π"])
        name = st.text_input("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞*")
        phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*")
        service = st.selectbox("–£—Å–ª—É–≥–∞*", list(SERVICE_PRICES.keys()))
        
        price = SERVICE_PRICES[service]
        st.info(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: **{price} —Ä—É–±.**")
        
        # –ü–æ–ª–µ "–ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª" —Ç–æ–ª—å–∫–æ –¥–ª—è –£—á–µ–±—ã
        if direction == "–£—á–µ–±–∞":
            # –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã + –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏—Å–∫–ª—é—á–∞—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–†–∞—Å—Å—ã–ª–∫–∞" –∏–∑ –≤—ã–±–æ—Ä–∞)
            all_people = list(df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞']["–ò–º—è"].unique())
            mailing_contacts = list(df[df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == "–†–∞—Å—Å—ã–ª–∫–∞"]["–ò–º—è"].unique())
            all_available_people = list(set(all_people + mailing_contacts))
            
            invited_by = st.selectbox("–ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª", [""] + sorted(all_available_people))
        else:
            invited_by = ""
        
        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", use_container_width=True)
        
        if submitted:
            if name and phone and service:
                client_id = create_client_id(name, phone)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
                existing_client = df[df['client_id'] == client_id]
                
                if len(existing_client) > 0:
                    st.warning("–ö–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
                    mask = df['client_id'] == client_id
                    df.loc[mask, '–î–∞—Ç–∞'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    df.loc[mask, '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] = direction
                    df.loc[mask, '–£—Å–ª—É–≥–∞'] = service
                    df.loc[mask, '–¶–µ–Ω–∞'] = price
                    df.loc[mask, '–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª'] = invited_by
                else:
                    new_client = {
                        "client_id": client_id,
                        "–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": direction,
                        "–ò–º—è": name,
                        "–¢–µ–ª–µ—Ñ–æ–Ω": phone,
                        "–£—Å–ª—É–≥–∞": service,
                        "–¶–µ–Ω–∞": price,
                        "–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª": invited_by,
                        "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã": "",
                        "–°—Å—ã–ª–∫–∞_VK": "",
                        "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞": ""
                    }
                    df = pd.concat([df, pd.DataFrame([new_client])], ignore_index=True)
                
                save_data(df)
                st.success(f"–ö–ª–∏–µ–Ω—Ç {name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)")

# --- –†–ê–°–°–´–õ–ö–ê ---
elif page == "–†–∞—Å—Å—ã–ª–∫–∞":
    st.title("üìß –†–∞—Å—Å—ã–ª–∫–∞")
    st.markdown("---")
    
    # –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º selectbox –≤–º–µ—Å—Ç–æ tabs
    if is_mobile:
        tab_option = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", ["–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", "–ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"])
    else:
        tab_option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", ["–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", "–ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"], horizontal=True)
    
    if tab_option == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç":
        with st.form("mailing_form"):
            mailing_name = st.text_input("–ò–º—è*")
            study_place = st.text_input("–ú–µ—Å—Ç–æ —É—á–µ–±—ã")
            vk_link = st.text_input("–°—Å—ã–ª–∫–∞ VK")
            mailing_consent = st.radio("–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É*", ["–î–∞", "–ù–µ—Ç"])
            
            submitted_mailing = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", use_container_width=True)
            
            if submitted_mailing:
                if mailing_name:
                    client_id = create_client_id(mailing_name, "")
                    
                    new_mailing = {
                        "client_id": client_id,
                        "–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "–†–∞—Å—Å—ã–ª–∫–∞",
                        "–ò–º—è": mailing_name,
                        "–¢–µ–ª–µ—Ñ–æ–Ω": "",
                        "–£—Å–ª—É–≥–∞": "",
                        "–¶–µ–Ω–∞": 0,
                        "–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª": "",
                        "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã": study_place,
                        "–°—Å—ã–ª–∫–∞_VK": vk_link,
                        "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞": mailing_consent
                    }
                    df = pd.concat([df, pd.DataFrame([new_mailing])], ignore_index=True)
                    save_data(df)
                    st.success(f"{mailing_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Ä–∞—Å—Å—ã–ª–∫–∏!")
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è")
    
    else:  # –ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        mailing_df = df[df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == "–†–∞—Å—Å—ã–ª–∫–∞"]
        if not mailing_df.empty:
            st.dataframe(mailing_df[["–ò–º—è", "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã", "–°—Å—ã–ª–∫–∞_VK", "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞"]])
            
            contacts_to_delete = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                mailing_df["–ò–º—è"].unique()
            )
            
            if contacts_to_delete and st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã", use_container_width=True):
                df = df[~((df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == "–†–∞—Å—Å—ã–ª–∫–∞") & (df["–ò–º—è"].isin(contacts_to_delete)))]
                save_data(df)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ {len(contacts_to_delete)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤!")
                st.rerun()
        else:
            st.info("–ë–∞–∑–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç–∞")

# --- –ê–ù–ê–õ–ò–¢–ò–ö–ê ---
elif page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
    st.title("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    st.markdown("---")
    
    if not df.empty:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
        st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        col3, col4 = st.columns(2)
        
        with col1:
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_income = df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞']["–¶–µ–Ω–∞"].sum()
            st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_income:,} —Ä—É–±.")
            
        with col2:
            total_clients = df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞']["–ò–º—è"].nunique()
            st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", total_clients)
            
        with col3:
            total_services = len(df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞'])
            st.metric("–í—Å–µ–≥–æ —É—Å–ª—É–≥", total_services)
            
        with col4:
            filtered_df = df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞']
            avg_price = filtered_df["–¶–µ–Ω–∞"].mean() if len(filtered_df) > 0 else 0
            st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_price:.0f} —Ä—É–±.")
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
        
        filter_direction = st.multiselect("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"].unique())
        filter_service = st.multiselect("–£—Å–ª—É–≥–∞", df["–£—Å–ª—É–≥–∞"].unique())
        
        col1, col2 = st.columns(2)
        with col1:
            min_price = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", 0, value=0)
        with col2:
            max_price = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", 0, value=int(df["–¶–µ–Ω–∞"].max()))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = df.copy()
        
        if filter_direction:
            filtered_df = filtered_df[filtered_df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"].isin(filter_direction)]
        if filter_service:
            filtered_df = filtered_df[filtered_df["–£—Å–ª—É–≥–∞"].isin(filter_service)]
        
        filtered_df = filtered_df[(filtered_df["–¶–µ–Ω–∞"] >= min_price) & (filtered_df["–¶–µ–Ω–∞"] <= max_price)]
        
        # –î–∞–Ω–Ω—ã–µ
        st.subheader("üìã –î–∞–Ω–Ω—ã–µ")
        st.dataframe(filtered_df)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        st.subheader("üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        all_clients = filtered_df["–ò–º—è"].unique()
        
        if len(all_clients) > 0:
            clients_to_delete = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", all_clients)
            
            if clients_to_delete and st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", use_container_width=True):
                df = df[~df["–ò–º—è"].isin(clients_to_delete)]
                save_data(df)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ {len(clients_to_delete)} –∫–ª–∏–µ–Ω—Ç–æ–≤!")
                st.rerun()
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        csv = filtered_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"marketing_data_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv",
            use_container_width=True
        )
        
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
