import pandas as pd
from datetime import datetime
import hashlib
import requests
import time
import re
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = "8140791835:AAGh6DwKrOK19iAupdwi50bGM5kjFIZPraM"
last_update_id = 0

SERVICE_PRICES = {
    "–°—Ç—Ä–∏–∂–∫–∞": 900, "–ë–æ—Ä–æ–¥–∞": 500, "VIP": 500,
    "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Å–∫–æ–º 1": 200, "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Å–∫–æ–º 2": 300,
    "–£—Ö–æ–¥–æ–≤–∞—è –º–∞—Å–∫–∞ Nishman": 1000, "–°—Ç—Ä–∏–∂–∫–∞+–±–æ—Ä–æ–¥–∞": 1400,
    "–î–µ—Ç—Å–∫–∞—è": 800, "–ü–æ–¥ –º–∞—à–∏–Ω–∫—É": 900
}

def load_data():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub
        df = pd.read_csv("marketing_database.csv", encoding='utf-8')
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return df
    except FileNotFoundError:
        logger.info("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        return pd.DataFrame(columns=[
            "visit_id", "client_id", "–î–∞—Ç–∞", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∞", 
            "–¶–µ–Ω–∞", "–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª", "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã", "–°—Å—ã–ª–∫–∞_VK", "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞"
        ])

def save_data(df):
    df.to_csv("marketing_database.csv", index=False, encoding='utf-8')
    logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

def send_telegram_message(chat_id, message, parse_mode='HTML'):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': parse_mode
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            return True
        else:
            logger.error(f"Telegram API error: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"Telegram send error: {e}")
        return False

def get_telegram_updates():
    global last_update_id
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    params = {
        'offset': last_update_id + 1,
        'timeout': 10
    }
    
    try:
        response = requests.get(url, params=params, timeout=15)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                return data.get('result', [])
        return []
    except Exception as e:
        logger.error(f"Telegram update error: {e}")
        return []

def process_telegram_command(update):
    global last_update_id
    
    message = update.get('message', {})
    chat_id = message.get('chat', {}).get('id')
    text = message.get('text', '').strip()
    
    if not text or not chat_id:
        return
    
    last_update_id = update.get('update_id', last_update_id)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç {chat_id}: {text}")
    
    if text == '/start':
        welcome_message = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Marketing Analytics Bot!</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/add_client - –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
/add_mailing - –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/history - –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        """
        send_telegram_message(chat_id, welcome_message)
        
    elif text == '/help':
        help_message = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>
/add_client - –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞

<b>–†–∞—Å—Å—ã–ª–∫–∞:</b>
/add_mailing - –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫—É

<b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/history - –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞

<b>–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:</b>
–ò–≤–∞–Ω, 89123456789, –°—Ç—Ä–∏–∂–∫–∞, Chop
        """
        send_telegram_message(chat_id, help_message)
        
    elif text == '/stats':
        df = load_data()
        clients_today, records_today, income_today, salary_today = get_today_stats(df)
        stats_message = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>

üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: <b>{clients_today}</b>
üìù –ó–∞–ø–∏—Å–µ–π: <b>{records_today}</b>
üí∞ –í—ã—Ä—É—á–∫–∞: <b>{income_today:,} ‚ÇΩ</b>
üíµ –ó–∞—Ä–ø–ª–∞—Ç–∞: <b>{salary_today:,.0f} ‚ÇΩ</b>
        """
        send_telegram_message(chat_id, stats_message)
        
    elif text == '/add_client':
        instruction = """
üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>

–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ò–º—è, –¢–µ–ª–µ—Ñ–æ–Ω, –£—Å–ª—É–≥–∞, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>–ê–Ω–Ω–∞, 89991234567, –°—Ç—Ä–∏–∂–∫–∞, Chop</code>
        """
        send_telegram_message(chat_id, instruction)
        
    elif text == '/add_mailing':
        instruction = """
üìß <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞—Å—Å—ã–ª–∫—É</b>

–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ò–º—è, –ú–µ—Å—Ç–æ —É—á–µ–±—ã, –°—Å—ã–ª–∫–∞ VK</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>–ú–∞—Ä–∏—è, –¢–ü–£, vk.com/maria</code>
        """
        send_telegram_message(chat_id, instruction)
        
    elif text == '/history':
        instruction = """
üìã <b>–ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞</b>

–û—Ç–ø—Ä–∞–≤—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:

<code>–ò–≤–∞–Ω</code>
        """
        send_telegram_message(chat_id, instruction)
    
    else:
        if re.match(r'^[^,]+,\s*\d+,\s*[^,]+,\s*[^,]+$', text):
            process_client_from_telegram(chat_id, text)
        elif re.match(r'^[^,]+,\s*[^,]*,\s*[^,]*$', text) and text.count(',') == 2:
            process_mailing_from_telegram(chat_id, text)
        elif re.match(r'^[–∞-—è–ê-–Øa-zA-Z\s]+$', text):
            process_client_history(chat_id, text)
        else:
            send_telegram_message(chat_id, "‚ùå –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help")

def process_client_from_telegram(chat_id, text):
    try:
        parts = [part.strip() for part in text.split(',')]
        if len(parts) != 4:
            send_telegram_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –ò–º—è, –¢–µ–ª–µ—Ñ–æ–Ω, –£—Å–ª—É–≥–∞, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            return
        
        name, phone, service, direction = parts
        
        if service not in SERVICE_PRICES:
            send_telegram_message(chat_id, f"‚ùå –£—Å–ª—É–≥–∞ '{service}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        valid_directions = ["–£—á–µ–±–∞", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–¶–≤–µ—Ç–æ—á–Ω—ã–π", "–ü–æ—á—Ç–∞", "Chop", "–°–ª—É—á–∞–π–Ω—ã–π"]
        if direction not in valid_directions:
            send_telegram_message(chat_id, f"‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        price = SERVICE_PRICES[service]
        df = load_data()
        
        client_id = create_client_id(name, phone)
        visit_id = hashlib.md5(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}_{name}_{phone}".encode()).hexdigest()
        
        existing_client = df[df['client_id'] == client_id]
        is_new_client = len(existing_client) == 0
        visit_count = len(existing_client) + 1
        
        new_visit = {
            "visit_id": visit_id, "client_id": client_id,
            "–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": direction, "–ò–º—è": name, "–¢–µ–ª–µ—Ñ–æ–Ω": phone,
            "–£—Å–ª—É–≥–∞": service, "–¶–µ–Ω–∞": price, "–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª": "",
            "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã": "", "–°—Å—ã–ª–∫–∞_VK": "", "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞": ""
        }
        
        df = pd.concat([df, pd.DataFrame([new_visit])], ignore_index=True)
        save_data(df)
        
        if is_new_client:
            message = f"üéâ <b>–ù–û–í–´–ô –ö–õ–ò–ï–ù–¢ –î–û–ë–ê–í–õ–ï–ù</b>\n\n"
        else:
            message = f"üìã <b>–ù–û–í–û–ï –ü–û–°–ï–©–ï–ù–ò–ï</b>\n\n"
        
        message += f"üë§ <b>–ò–º—è:</b> {name}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        message += f"üéØ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}\nüíá <b>–£—Å–ª—É–≥–∞:</b> {service}\n"
        message += f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±.\n"
        
        if not is_new_client:
            message += f"üìä <b>–í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π:</b> {visit_count}\n"
        
        message += f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        
        send_telegram_message(chat_id, message)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç: {name}")
        
    except Exception as e:
        send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")

def process_mailing_from_telegram(chat_id, text):
    try:
        parts = [part.strip() for part in text.split(',')]
        name, study_place, vk_link = parts
        
        df = load_data()
        client_id = create_client_id(name, "")
        visit_id = hashlib.md5(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}_{name}_".encode()).hexdigest()
        
        new_mailing = {
            "visit_id": visit_id, "client_id": client_id,
            "–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "–†–∞—Å—Å—ã–ª–∫–∞", "–ò–º—è": name, "–¢–µ–ª–µ—Ñ–æ–Ω": "",
            "–£—Å–ª—É–≥–∞": "", "–¶–µ–Ω–∞": 0, "–ö—Ç–æ_–ø—Ä–∏–≥–ª–∞—Å–∏–ª": "",
            "–ú–µ—Å—Ç–æ_—É—á–µ–±—ã": study_place, "–°—Å—ã–ª–∫–∞_VK": vk_link, "–°–æ–≥–ª–∞—Å–∏–µ_—Ä–∞—Å—Å—ã–ª–∫–∞": "–î–∞"
        }
        
        df = pd.concat([df, pd.DataFrame([new_mailing])], ignore_index=True)
        save_data(df)
        
        message = f"üìß <b>–ö–û–ù–¢–ê–ö–¢ –î–û–ë–ê–í–õ–ï–ù –í –†–ê–°–°–´–õ–ö–£</b>\n\n"
        message += f"üë§ <b>–ò–º—è:</b> {name}\nüéì <b>–ú–µ—Å—Ç–æ —É—á–µ–±—ã:</b> {study_place}\n"
        message += f"üîó <b>–°—Å—ã–ª–∫–∞ VK:</b> {vk_link}\n‚úÖ <b>–°–æ–≥–ª–∞—Å–∏–µ:</b> –î–∞\n"
        message += f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        
        send_telegram_message(chat_id, message)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É: {name}")
        
    except Exception as e:
        send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É: {e}")

def process_client_history(chat_id, client_name):
    try:
        df = load_data()
        client_data = df[df['–ò–º—è'] == client_name]
        if client_data.empty:
            send_telegram_message(chat_id, f"‚ùå –ö–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        client_id = client_data.iloc[0]['client_id']
        client_history = get_client_history(df, client_id)
        
        total_visits = len(client_history)
        total_spent = client_history['–¶–µ–Ω–∞'].sum()
        avg_spent = total_spent / total_visits if total_visits > 0 else 0
        
        message = f"üìã <b>–ò–°–¢–û–†–ò–Ø –ö–õ–ò–ï–ù–¢–ê: {client_name}</b>\n\n"
        message += f"üìä <b>–í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π:</b> {total_visits}\n"
        message += f"üí∞ <b>–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {total_spent:,} —Ä—É–±.\n"
        message += f"üí≥ <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> {avg_spent:.0f} —Ä—É–±.\n\n"
        
        message += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è:</b>\n"
        for _, visit in client_history.head(5).iterrows():
            message += f"‚Ä¢ {visit['–î–∞—Ç–∞'][:16]} - {visit['–£—Å–ª—É–≥–∞']} ({visit['–¶–µ–Ω–∞']} —Ä—É–±.)\n"
        
        if total_visits > 5:
            message += f"\n... –∏ –µ—â–µ {total_visits - 5} –ø–æ—Å–µ—â–µ–Ω–∏–π"
        
        send_telegram_message(chat_id, message)
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name}")
        
    except Exception as e:
        send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def create_client_id(name, phone):
    return hashlib.md5(f"{name}_{phone}".encode()).hexdigest()

def get_today_stats(df):
    today = datetime.now().strftime("%Y-%m-%d")
    today_df = df[(df['–î–∞—Ç–∞'].str.startswith(today)) & (df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != '–†–∞—Å—Å—ã–ª–∫–∞')]
    
    clients_today = today_df['–ò–º—è'].nunique()
    records_today = len(today_df)
    income_today = today_df['–¶–µ–Ω–∞'].sum()
    salary_today = income_today * 0.4
    
    return clients_today, records_today, income_today, salary_today

def get_client_history(df, client_id):
    return df[df['client_id'] == client_id].sort_values('–î–∞—Ç–∞', ascending=False)

def telegram_bot_worker():
    global last_update_id
    logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    while True:
        try:
            updates = get_telegram_updates()
            
            for update in updates:
                update_id = update.get('update_id', 0)
                if update_id > last_update_id:
                    last_update_id = update_id
                    process_telegram_command(update)
            
            time.sleep(1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            time.sleep(5)

if __name__ == "__main__":
    telegram_bot_worker()
